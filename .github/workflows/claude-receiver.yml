name: Claude Receiver

on:
  # Handle dispatched requests from all repos (including monorepo itself)
  repository_dispatch:
    types: [claude-request]

jobs:
  claude:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Direct prompt with the request from the subrepo
          direct_prompt: |
            Read the issue thread at: ${{ github.event.client_payload.issue_url }}
            
            This is from repository: ${{ github.event.client_payload.repository }}
            
            The user mentioned you with: ${{ github.event.client_payload.comment_body || github.event.client_payload.issue_body }}
            
            IMPORTANT: 
            1. First use WebFetch to read the ENTIRE issue thread at the URL above to understand the full context
            2. When creating a PR, you MUST include "Closes ${{ github.event.client_payload.issue_url }}" in the PR description
            3. Focus on changes that relate to the specific subrepo package mentioned in the request
      
      - name: Update comment in source repo
        if: always() && github.event.client_payload.comment_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MONOREPO_DISPATCH_TOKEN }}
          script: |
            const [owner, repo] = '${{ github.event.client_payload.repository }}'.split('/');
            const commentId = '${{ github.event.client_payload.comment_id }}';
            
            let body = '❌ Claude encountered an error processing your request.';
            
            if ('${{ steps.claude.outcome }}' === 'success') {
              body = '✅ Claude has processed your request. Check the monorepo for the PR.';
            }
            
            await github.rest.issues.updateComment({
              owner: owner,
              repo: repo,
              comment_id: parseInt(commentId),
              body: body
            });